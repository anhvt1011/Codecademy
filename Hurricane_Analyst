# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}
def update_damages(damages, conversion):
  for i in range(len(damages)):
    if damages[i][-1] == 'M' or damages[i][-1] == 'B':
      temp_num = float(damages[i][:len(damages[i])-1])
      damages[i] = temp_num * conversion[damages[i][-1]]
  return damages
# test function by updating damages
damages = update_damages(damages, conversion)
#print(damages)

# 2 
# Create a Table
hurricanes = {}
def create_canes_dict(hurricanes, names, months, years, max_sustained_winds, areas_affected, damages, deaths):
  for i in range(len(names)):
    hurricanes[names[i]] = {"Name:": names[i], "Month:":months[i], "Year:": years[i], "Max Sustanined Wind":max_sustained_winds[i], "Areas Affected:": areas_affected[i], "Damage:":damages[i], "Death:":deaths[i]}
# Create and view the hurricanes dictionary
create_canes_dict(hurricanes, names, months, years, max_sustained_winds, areas_affected, damages, deaths)
#print(hurricanes["Cuba I"])

# 3
# Organizing by Year
hurricanes_by_year = {}
def organizing_by_year(names, hurricanes):
  new_dict = {}
  for i in range(len(names)):
    current_year = hurricanes[names[i]]['Year:']
    current_cane = hurricanes[names[i]]
    new_dict[current_year] = [hurricane for hurricane in hurricanes.values() if hurricane['Year:'] == current_year]
  return new_dict
# create a new dictionary of hurricanes with year and key
hurricanes_by_year = organizing_by_year(names, hurricanes)
#print(hurricanes_by_year[1932])

# 4
# Counting Damaged Areas
areas_count = {}
def damaged_areas_count(areas_affected):
  for listed in areas_affected:
    for area in listed:
      if area not in areas_count:
        areas_count[area] = 1
      else: areas_count[area] += 1

# create dictionary of areas to store the number of hurricanes involved in
damaged_areas_count(areas_affected)
#print(areas_count)

# 5 
# Calculating Maximum Hurricane Count
def maxium_hurricane_count(areas_count):
  max_are = ""
  count = 0
  most_affected_area = {} 
  for area in areas_count:
    if areas_count[area] > count:
      count = areas_count[area]
      max_are = area
  most_affected_area[area] = count
  return most_affected_area

# find most frequently affected area and the number of hurricanes involved in
#print(maxium_hurricane_count(areas_count))

# 6
# Calculating the Deadliest Hurricane
def maximum_deaths_find(hurricanes):
  max_deaths = 0
  cane_name = ""
  deadliest_hurricane = {}
  for cane in hurricanes:
    if hurricanes[cane]["Death:"] > max_deaths:
      max_deaths = hurricanes[cane]["Death:"]
      cane_name = cane
  deadliest_hurricane[cane_name] = max_deaths
  return deadliest_hurricane

# find highest mortality hurricane and the number of deaths
#print(maximum_deaths_find(hurricanes))

# 7
# Rating Hurricanes by Mortality
def rating_hurricanes_by_mortality(hurricanes):
  canes_rated_by_mortality[0] = [cane["Name:"] for cane in hurricanes.values() if cane["Death:"] == 0]
  canes_rated_by_mortality[1] = [cane["Name:"] for cane in hurricanes.values() if cane["Death:"] > 0 and cane["Death:"] <= 100]
  canes_rated_by_mortality[2] = [cane["Name:"] for cane in hurricanes.values() if cane["Death:"] > 100 and cane["Death:"] <= 500]
  canes_rated_by_mortality[3] = [cane["Name:"] for cane in hurricanes.values() if cane["Death:"] > 500 and cane["Death:"] <= 1000]
  canes_rated_by_mortality[4] = [cane["Name:"] for cane in hurricanes.values() if cane["Death:"] > 1000 and cane["Death:"] <= 1000]
  return canes_rated_by_mortality

# categorize hurricanes in new dictionary with mortality severity as key
canes_rated_by_mortality = {}
rating_hurricanes_by_mortality(hurricanes)
#print(canes_rated_by_mortality)

# 8 Calculating Hurricane Maximum Damage
def maxium_damage_finding(hurricanes):
  max_damage = 0
  cane_name = ""
  for cane in hurricanes:
      if hurricanes[cane]["Damage:"] != 'Damages not recorded':
        if hurricanes[cane]["Damage:"] >max_damage:
          max_damage = hurricanes[cane]["Damage:"]
          cane_name = cane
  max_damage_cane = {}
  max_damage_cane[cane] = max_damage
  return max_damage_cane

# find highest damage inducing hurricane and its total cost
#print(maxium_damage_finding(hurricanes))

# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key
canes_rated_by_damage = {}
def rate_cane_by_damage(hurricanes):
    canes_rated_by_damage[0] = [cane["Name:"] for cane in hurricanes.values() if cane["Damage:"] == 'Damages not recorded']
    i = 1
    while i < 5:
      canes_rated_by_damage[i] = [cane["Name:"] for cane in hurricanes.values() if cane["Damage:"] != 'Damages not recorded' and cane ["Damage:"] > damage_scale[i - 1] and cane["Damage:"] <= damage_scale[i]]
      i += 1

rate_cane_by_damage(hurricanes)
print(canes_rated_by_damage)
